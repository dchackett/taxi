#!/bin/bash

python -c """
import taxi
import taxi.tools as tools
import taxi.mcmc

command_line_args = '$*'.split()
d = tools.load.dispatch(command_line_args[0])


task_id = int(command_line_args[1])
param_name = command_line_args[2]
param_value = command_line_args[3]


tasks = d.get_all_tasks(include_complete=True)
task_to_edit = tasks[task_id]
current_value = getattr(task_to_edit, param_name, None)


# Try to get datatype right
type_was_determined = False
if current_value is not None:
    try:
        param_value = type(current_value)(param_value)
        type_was_determined = True
    except ValueError:
        pass

if not type_was_determined:
    try:
        int_value = int(param_value)
        if int_value == param_value:
            param_value = int_value
        else:
            param_value = float(param_value)
    except ValueError:
        pass


# Find dependents
tasks = tasks.values()
d._invert_dependency_graph(tasks)

# Could do this with recursion instead, but recursion is slow in Python
cascade_tasks = [task_to_edit]
tasks_to_edit = []
while len(cascade_tasks) > 0:
    # Pop task to edit off front of list
    rt = cascade_tasks[0]
    cascade_tasks = cascade_tasks[1:]
    
    if rt.branch_root and rt is not task_to_edit:
        continue
        
    tasks_to_edit.append(rt)
            
    # Get everything downstream
    for dt in rt._dependents:
        if dt not in tasks:
            continue # Don't have task
        cascade_tasks.append(dt)
        
# Only edit tasks of same type as specified task
tasks_to_edit = [t for t in tasks_to_edit if t.__class__ == task_to_edit.__class__]
        
for rt in tasks_to_edit:
    setattr(rt, param_name, param_value)
    if rt.status == 'pending':
        print 'Setting {0} to {1} in task {2}'.format(param_name, param_value, rt.id)
    else:
        print 'Skipping task {0} with status {1}.'.format(rt.id, rt.status)
    

d.write_tasks(tasks_to_edit)
"""


